{
  "timestamp": "2025-02-09T04:58:35.875Z",
  "files": [
    {
      "path": "package.json",
      "type": "config",
      "content": "{\n\t\"name\": \"notepadblog\",\n\t\"private\": true,\n\t\"version\": \"0.0.1\",\n\t\"type\": \"module\",\n\t\"scripts\": {\n\t\t\"dev\": \"vite dev\",\n\t\t\"build\": \"vite build\",\n\t\t\"preview\": \"vite preview\",\n\t\t\"prepare\": \"svelte-kit sync || echo ''\",\n\t\t\"check\": \"svelte-kit sync && svelte-check --tsconfig ./tsconfig.json\",\n\t\t\"check:watch\": \"svelte-kit sync && svelte-check --tsconfig ./tsconfig.json --watch\",\n\t\t\"format\": \"prettier --write .\",\n\t\t\"lint\": \"prettier --check . && eslint .\",\n\t\t\"snapshot\": \"node scripts/snapshot.js\"\n\t},\n\t\"devDependencies\": {\n\t\t\"@eslint/compat\": \"^1.2.5\",\n\t\t\"@eslint/js\": \"^9.18.0\",\n\t\t\"@sveltejs/adapter-vercel\": \"^5.5.2\",\n\t\t\"@sveltejs/kit\": \"^2.16.0\",\n\t\t\"@sveltejs/vite-plugin-svelte\": \"^5.0.0\",\n\t\t\"eslint\": \"^9.18.0\",\n\t\t\"eslint-config-prettier\": \"^10.0.1\",\n\t\t\"eslint-plugin-svelte\": \"^2.46.1\",\n\t\t\"globals\": \"^15.14.0\",\n\t\t\"prettier\": \"^3.4.2\",\n\t\t\"prettier-plugin-svelte\": \"^3.3.3\",\n\t\t\"svelte\": \"^5.0.0\",\n\t\t\"svelte-check\": \"^4.0.0\",\n\t\t\"typescript\": \"^5.0.0\",\n\t\t\"typescript-eslint\": \"^8.20.0\",\n\t\t\"vite\": \"^6.0.0\"\n\t},\n\t\"dependencies\": {\n\t\t\"@tailwindcss/vite\": \"^4.0.3\",\n\t\t\"fabric\": \"^6.5.4\",\n\t\t\"tailwindcss\": \"^4.0.3\"\n\t}\n}\n"
    },
    {
      "path": "src\\app.css",
      "type": "config",
      "content": "@import \"tailwindcss\";\n@custom-variant dark (&:where(.dark, .dark *));\n\n@theme {\n\n    --font-poppins: Poppins, sans-serif;\n}\n\n@layer components {\n    .typography {\n        p {\n            font-size: var(--text-base);\n            color: var(--color-gray-700);\n        }\n\n        h1 {\n            font-size: var(--text-2xl--line-height);\n            font-weight: var(--font-weight-semibold);\n            color: var(--color-gray-950);\n        }\n\n        h2 {\n            font-size: var(--text-xl);\n            font-weight: var(--font-weight-semibold);\n            color: var(--color-gray-950);\n        }\n    }\n}"
    },
    {
      "path": "src\\app.d.ts",
      "type": "config",
      "content": "// See https://svelte.dev/docs/kit/types#app.d.ts\n// for information about these interfaces\ndeclare global {\n\tnamespace App {\n\t\t// interface Error {}\n\t\t// interface Locals {}\n\t\t// interface PageData {}\n\t\t// interface PageState {}\n\t\t// interface Platform {}\n\t}\n}\n\nexport {};\n"
    },
    {
      "path": "src\\app.html",
      "type": "config",
      "content": "<!doctype html>\n<html lang=\"en\" class=\"dark\">\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t\t<link rel=\"icon\" href=\"%sveltekit.assets%/favicon.png\" />\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n\t\t%sveltekit.head%\n\t</head>\n\t<body data-sveltekit-preload-data=\"hover\">\n\t\t<div style=\"display: contents\">%sveltekit.body%</div>\n\t</body>\n</html>\n"
    },
    {
      "path": "src\\lib\\components\\MandelbrotSet\\index.ts",
      "type": "config",
      "content": "// src/lib/components/MandelbrotSet/index.ts\r\nexport { default as MandelbrotSet } from \"./Mandelbrot.svelte\"\r\nexport * from './types';"
    },
    {
      "path": "src\\lib\\components\\MandelbrotSet\\Mandelbrot.svelte",
      "type": "config",
      "content": "<!-- src/lib/components/MandelbrotSet/MandelbrotSet.svelte -->\r\n<script lang=\"ts\">\r\n\timport type { MandelbrotProps, WorkerMessage } from './types';\r\n\r\n\tlet {\r\n\t\twidth = $bindable(800),\r\n\t\theight = $bindable(600),\r\n\t\tmaxIterations = $bindable(100),\r\n\t\tcolorScheme = $bindable('classic')\r\n\t} = $props<{\r\n\t\twidth?: number;\r\n\t\theight?: number;\r\n\t\tmaxIterations?: number;\r\n\t\tcolorScheme?: 'classic' | 'ocean' | 'fire';\r\n\t}>();\r\n\r\n\tlet canvas: HTMLCanvasElement | undefined = $state();\r\n\tlet ctx: CanvasRenderingContext2D | null = $state(null);\r\n\tlet worker: Worker | undefined = $state();\r\n\tlet isRendering = $state(false);\r\n\r\n\t// View state\r\n\tlet zoom = $state(1);\r\n\tlet centerX = $state(-0.5);\r\n\tlet centerY = $state(0);\r\n\r\n\t// Pan state\r\n\tlet isDragging = $state(false);\r\n\tlet lastX = $state(0);\r\n\tlet lastY = $state(0);\r\n\tlet tempMaxIterations = $state(maxIterations);\r\n\r\n\t// Add selection state\r\n\tlet isSelecting = $state(false);\r\n\tlet selectionStart = $state({ x: 0, y: 0 });\r\n\tlet selectionEnd = $state({ x: 0, y: 0 });\r\n\tlet showSelection = $state(false);\r\n\r\n\t// Initialize worker\r\n\t$effect(() => {\r\n\t\tif (typeof window === 'undefined') return;\r\n\r\n\t\tworker = new Worker(new URL('./mandelbrot.worker.ts', import.meta.url), { type: 'module' });\r\n\r\n\t\tworker.onmessage = ({ data }: MessageEvent<WorkerMessage>) => {\r\n\t\t\tif (!ctx) return;\r\n\t\t\tctx.putImageData(data.imageData, 0, data.row);\r\n\t\t\tif (data.row >= height - 50) isRendering = false;\r\n\t\t};\r\n\r\n\t\treturn () => worker?.terminate();\r\n\t});\r\n\r\n\t// Initialize canvas context\r\n\t$effect(() => {\r\n\t\tif (!canvas) return;\r\n\t\tctx = canvas.getContext('2d');\r\n\t\tif (ctx) {\r\n\t\t\tctx.imageSmoothingEnabled = false;\r\n\t\t}\r\n\t});\r\n\r\n\tfunction renderMandelbrot(useTemp: boolean) {\r\n\t\tif (!ctx || !worker) return;\r\n\t\tisRendering = true;\r\n\r\n\t\tworker.postMessage({\r\n\t\t\twidth,\r\n\t\t\theight,\r\n\t\t\tmaxIterations: useTemp ? Math.min(10, maxIterations) : maxIterations,\r\n\t\t\tzoom,\r\n\t\t\tcenterX,\r\n\t\t\tcenterY,\r\n\t\t\tcolorScheme\r\n\t\t});\r\n\t}\r\n\r\n\t// Handle zoom\r\n\tfunction onMouseWheel(event: WheelEvent) {\r\n\t\tevent.preventDefault();\r\n\t\tconst zoomFactor = event.deltaY > 0 ? 0.9 : 1.1;\r\n\t\tconst rect = canvas?.getBoundingClientRect();\r\n\t\tif (!rect) return;\r\n\r\n\t\tconst mouseX = event.clientX - rect.left;\r\n\t\tconst mouseY = event.clientY - rect.top;\r\n\r\n\t\t// Zoom towards mouse position\r\n\t\tcenterX += ((mouseX - width / 2) / (width * zoom)) * (1 - zoomFactor);\r\n\t\tcenterY += ((mouseY - height / 2) / (height * zoom)) * (1 - zoomFactor);\r\n\t\tzoom *= zoomFactor;\r\n\r\n\t\trenderMandelbrot(true); // Use lower iterations during zoom\r\n\r\n\t\t// Debounce the full quality render\r\n\t\tclearTimeout(zoomTimeout);\r\n\t\tzoomTimeout = setTimeout(() => {\r\n\t\t\trenderMandelbrot(false); // Render full quality after zoom ends\r\n\t\t}, 150);\r\n\t}\r\n\tlet zoomTimeout: ReturnType<typeof setTimeout>;\r\n\t// Cleanup\r\n\t$effect(() => {\r\n\t\treturn () => {\r\n\t\t\tclearTimeout(zoomTimeout);\r\n\t\t};\r\n\t});\r\n\r\n\t// Handle pan and selection\r\n\tfunction onMouseDown(event: MouseEvent) {\r\n\t\tconst rect = canvas?.getBoundingClientRect();\r\n\t\tif (!rect) return;\r\n\t\tif (event.shiftKey) {\r\n\t\t\t// Start selection when shift is held\r\n\t\t\tisSelecting = true;\r\n\t\t\tshowSelection = true;\r\n\t\t\tselectionStart = {\r\n\t\t\t\tx: event.clientX - rect.left,\r\n\t\t\t\ty: event.clientY - rect.top\r\n\t\t\t};\r\n\t\t\tselectionEnd = { ...selectionStart };\r\n\t\t} else {\r\n\t\t\t// Normal panning behavior\r\n\t\t\tisDragging = true;\r\n\t\t\tlastX = event.clientX;\r\n\t\t\tlastY = event.clientY;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction onMouseMove(event: MouseEvent) {\r\n\t\tconst rect = canvas?.getBoundingClientRect();\r\n\t\tif (!rect) return;\r\n\t\tif (isSelecting) {\r\n\t\t\t// Update selection rectangle\r\n\t\t\tselectionEnd = {\r\n\t\t\t\tx: event.clientX - rect.left,\r\n\t\t\t\ty: event.clientY - rect.top\r\n\t\t\t};\r\n\t\t} else if (isDragging) {\r\n\t\t\t// Existing pan logic\r\n\t\t\tconst deltaX = event.clientX - lastX;\r\n\t\t\tconst deltaY = event.clientY - lastY;\r\n\r\n\t\t\tcenterX -= deltaX / (width * zoom);\r\n\t\t\tcenterY -= deltaY / (height * zoom);\r\n\r\n\t\t\tlastX = event.clientX;\r\n\t\t\tlastY = event.clientY;\r\n\r\n\t\t\trenderMandelbrot(true);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction onMouseUp() {\r\n\t\tif (isSelecting) {\r\n\t\t\tconst selectionWidth = Math.abs(selectionEnd.x - selectionStart.x);\r\n\t\t\tconst selectionHeight = Math.abs(selectionEnd.y - selectionStart.y);\r\n\r\n\t\t\tif (selectionWidth > 10 && selectionHeight > 10) {\r\n\t\t\t\t// Calculate new view parameters\r\n\t\t\t\tconst selectionCenterX = (selectionStart.x + selectionEnd.x) / 2;\r\n\t\t\t\tconst selectionCenterY = (selectionStart.y + selectionEnd.y) / 2;\r\n\r\n\t\t\t\t// Calculate new zoom level based on selection size\r\n\t\t\t\tconst scaleX = width / selectionWidth;\r\n\t\t\t\tconst scaleY = height / selectionHeight;\r\n\t\t\t\tconst newZoom = zoom * Math.min(scaleX, scaleY);\r\n\r\n\t\t\t\t// Update center position\r\n\t\t\t\tcenterX += (selectionCenterX - width / 2) / (width * zoom);\r\n\t\t\t\tcenterY += (selectionCenterY - height / 2) / (height * zoom);\r\n\t\t\t\tzoom = newZoom;\r\n\r\n\t\t\t\trenderMandelbrot(false);\r\n\t\t\t}\r\n\r\n\t\t\t// Reset selection\r\n\t\t\tisSelecting = false;\r\n\t\t\tshowSelection = false;\r\n\t\t} else if (isDragging) {\r\n\t\t\tisDragging = false;\r\n\t\t\trenderMandelbrot(false);\r\n\t\t}\r\n\t}\r\n\r\n\t// Reset view\r\n\tfunction resetView() {\r\n\t\tzoom = 1;\r\n\t\tcenterX = -0.5;\r\n\t\tcenterY = 0;\r\n\t\trenderMandelbrot(false);\r\n\t}\r\n\r\n\t// Initial render\r\n\t$effect(() => {\r\n\t\trenderMandelbrot(false);\r\n\t});\r\n</script>\r\n\r\n<div class=\"mandelbrot @container\">\r\n\t<canvas\r\n\t\tbind:this={canvas}\r\n\t\t{width}\r\n\t\t{height}\r\n\t\tclass=\"w-full h-full object-contain cursor-move touch-none\"\r\n\t\tonwheel={onMouseWheel}\r\n\t\tonmousedown={onMouseDown}\r\n\t\tonmousemove={onMouseMove}\r\n\t\tonmouseup={onMouseUp}\r\n\t\tonmouseleave={onMouseUp}\r\n\t></canvas>\r\n\t<!-- Selection overlay -->\r\n\t{#if showSelection}\r\n\t\t<div\r\n\t\t\tclass=\"absolute pointer-events-none border-2 border-white/50 bg-white/10\"\r\n\t\t\tstyle:left=\"{Math.min(selectionStart.x, selectionEnd.x)}px\"\r\n\t\t\tstyle:top=\"{Math.min(selectionStart.y, selectionEnd.y)}px\"\r\n\t\t\tstyle:width=\"{Math.abs(selectionEnd.x - selectionStart.x)}px\"\r\n\t\t\tstyle:height=\"{Math.abs(selectionEnd.y - selectionStart.y)}px\"\r\n\t\t></div>\r\n\t{/if}\r\n\r\n  <!-- Existing controls -->\r\n\t<div class=\"controls @lg:absolute @lg:top-4 @lg:right-4 @sm:mt-4\">\r\n\t\t<div class=\"bg-neutral-900/20 backdrop-blur rounded-lg p-4 space-y-4\">\r\n\t\t\t<div class=\"space-y-2\">\r\n\t\t\t\t<label for=\"maxIterations\" class=\"text-sm text-neutral-50\">Max Iterations</label>\r\n\t\t\t\t<input\r\n\t\t\t\t\tid=\"maxIterations\"\r\n\t\t\t\t\ttype=\"range\"\r\n\t\t\t\t\tmin=\"50\"\r\n\t\t\t\t\tmax=\"1000\"\r\n\t\t\t\t\tstep=\"50\"\r\n\t\t\t\t\tbind:value={maxIterations}\r\n\t\t\t\t\tclass=\"w-full accent-primary-500 bg-neutral-700/50\"\r\n\t\t\t\t\tonchange={() => renderMandelbrot(true)}\r\n\t\t\t\t/>\r\n\t\t\t\t<span class=\"text-xs text-neutral-400\">{maxIterations}</span>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"space-y-2\">\r\n\t\t\t\t<label for=\"colorScheme\" class=\"text-sm text-neutral-50\">Color Scheme</label>\r\n\t\t\t\t<select\r\n\t\t\t\t\tid=\"colorScheme\"\r\n\t\t\t\t\tbind:value={colorScheme}\r\n\t\t\t\t\tclass=\"w-full bg-neutral-800/50 text-neutral-50 rounded-md border-neutral-700 focus:ring-primary-500\"\r\n\t\t\t\t\tonchange={() => renderMandelbrot(true)}\r\n\t\t\t\t>\r\n\t\t\t\t\t<option value=\"classic\">Classic</option>\r\n\t\t\t\t\t<option value=\"ocean\">Ocean</option>\r\n\t\t\t\t\t<option value=\"fire\">Fire</option>\r\n\t\t\t\t</select>\r\n\t\t\t</div>\r\n\r\n\t\t\t<button\r\n\t\t\t\tonclick={resetView}\r\n\t\t\t\tclass=\"w-full px-4 py-2 bg-neutral-800/50 hover:bg-neutral-700/50 text-neutral-50 rounded-md transition-colors\"\r\n\t\t\t>\r\n\t\t\t\tReset View\r\n\t\t\t</button>\r\n\r\n\t\t\t{#if isRendering}\r\n\t\t\t\t<div class=\"text-sm text-neutral-50/80 animate-pulse\">Rendering...</div>\r\n\t\t\t{/if}\r\n\t\t</div>\r\n    <!-- Add help text -->\r\n    <div class=\"mt-2 text-xs text-neutral-300/80\">\r\n      Hold Shift + Click & Drag to zoom into a region\r\n    </div>\r\n\t</div>\r\n</div>\r\n\r\n<style>\r\n\t@reference \"tailwindcss/theme\";\r\n\r\n\t.mandelbrot {\r\n\t\tposition: relative;\r\n\t\tbackground-color: theme(--color-neutral-900);\r\n\t\tborder-radius: theme(--radius-lg);\r\n\t\toverflow: hidden;\r\n\t\tbox-shadow: theme(--shadow-xl);\r\n\t}\r\n\r\n\t.controls {\r\n\t\tz-index: theme(zIndex.10);\r\n\t}\r\n</style>\r\n"
    },
    {
      "path": "src\\lib\\components\\MandelbrotSet\\mandelbrot.worker.ts",
      "type": "config",
      "content": "// src/lib/components/MandelbrotSet/mandelbrot.worker.ts\r\nimport type { WorkerData } from './types';\r\n\r\ntype RGBAColor = [number, number, number, number];\r\n\r\nconst colorSchemes = {\r\n  classic: (n: number, max: number): RGBAColor => {\r\n    if (n === max) return [0, 0, 0, 255];\r\n    const hue = (n / max) * 360;\r\n    const sat = 100;\r\n    const light = 50;\r\n    const c = (1 - Math.abs(2 * light / 100 - 1)) * sat / 100;\r\n    const x = c * (1 - Math.abs((hue / 60) % 2 - 1));\r\n    const m = light / 100 - c / 2;\r\n    \r\n    let r: number, g: number, b: number;\r\n    if (hue < 60) [r, g, b] = [c, x, 0];\r\n    else if (hue < 120) [r, g, b] = [x, c, 0];\r\n    else if (hue < 180) [r, g, b] = [0, c, x];\r\n    else if (hue < 240) [r, g, b] = [0, x, c];\r\n    else if (hue < 300) [r, g, b] = [x, 0, c];\r\n    else [r, g, b] = [c, 0, x];\r\n    \r\n    return [\r\n      Math.round((r + m) * 255),\r\n      Math.round((g + m) * 255),\r\n      Math.round((b + m) * 255),\r\n      255\r\n    ];\r\n  },\r\n  \r\n  ocean: (n: number, max: number): RGBAColor => {\r\n    if (n === max) return [0, 0, 0, 255];\r\n    const value = n / max;\r\n    const intensity = Math.sqrt(value);\r\n    return [\r\n      Math.round(intensity * 30),\r\n      Math.round(intensity * 100 + 155),\r\n      Math.round(intensity * 255),\r\n      255\r\n    ];\r\n  },\r\n  \r\n  fire: (n: number, max: number): RGBAColor => {\r\n    if (n === max) return [0, 0, 0, 255];\r\n    const value = n / max;\r\n    const intensity = Math.pow(value, 1.5);\r\n    return [\r\n      Math.round(intensity * 255),\r\n      Math.round(Math.pow(value, 2) * 200),\r\n      Math.round(Math.pow(value, 3) * 128),\r\n      255\r\n    ];\r\n  }\r\n};\r\n\r\nfunction mandelbrot(x0: number, y0: number, maxIterations: number): number {\r\n  let x = 0;\r\n  let y = 0;\r\n  let iteration = 0;\r\n  let x2 = 0;\r\n  let y2 = 0;\r\n  \r\n  while (x2 + y2 <= 4 && iteration < maxIterations) {\r\n    y = 2 * x * y + y0;\r\n    x = x2 - y2 + x0;\r\n    x2 = x * x;\r\n    y2 = y * y;\r\n    iteration++;\r\n  }\r\n  \r\n  return iteration;\r\n}\r\n\r\nself.onmessage = (e: MessageEvent<WorkerData>) => {\r\n  const {\r\n    width,\r\n    height,\r\n    maxIterations,\r\n    zoom,\r\n    centerX,\r\n    centerY,\r\n    colorScheme\r\n  } = e.data;\r\n  \r\n  const getColor = colorSchemes[colorScheme];\r\n  const chunkSize = 50; // Process in chunks for better responsiveness\r\n  \r\n  for (let startRow = 0; startRow < height; startRow += chunkSize) {\r\n    const endRow = Math.min(startRow + chunkSize, height);\r\n    const imageData = new ImageData(width, endRow - startRow);\r\n    \r\n    for (let row = startRow; row < endRow; row++) {\r\n      for (let col = 0; col < width; col++) {\r\n        const x = (col - width / 2) / (width * zoom) + centerX;\r\n        const y = (row - height / 2) / (height * zoom) + centerY;\r\n        \r\n        const iteration = mandelbrot(x, y, maxIterations);\r\n        const color = getColor(iteration, maxIterations);\r\n        \r\n        const pixelIndex = ((row - startRow) * width + col) * 4;\r\n        imageData.data[pixelIndex] = color[0];\r\n        imageData.data[pixelIndex + 1] = color[1];\r\n        imageData.data[pixelIndex + 2] = color[2];\r\n        imageData.data[pixelIndex + 3] = color[3];\r\n      }\r\n    }\r\n    \r\n    self.postMessage({ imageData, row: startRow });\r\n  }\r\n};"
    },
    {
      "path": "src\\lib\\components\\MandelbrotSet\\types.ts",
      "type": "config",
      "content": "// src/lib/components/MandelbrotSet/types.ts\r\nexport type ColorScheme = 'classic' | 'ocean' | 'fire';\r\n\r\nexport type MandelbrotProps = {\r\n  width?: number;\r\n  height?: number;\r\n  maxIterations?: number;\r\n  colorScheme?: ColorScheme;\r\n};\r\n\r\nexport type WorkerMessage = {\r\n  imageData: ImageData;\r\n  row: number;\r\n};\r\n\r\nexport type WorkerData = {\r\n  width: number;\r\n  height: number;\r\n  maxIterations: number;\r\n  zoom: number;\r\n  centerX: number;\r\n  centerY: number;\r\n  colorScheme: ColorScheme;\r\n};\r\n\r\n"
    },
    {
      "path": "src\\lib\\components\\Sketch\\fabric-types.ts",
      "type": "config",
      "content": "// src/lib/components/Sketch/fabric-types.ts\r\nimport type { \r\n  Canvas,\r\n  IText,\r\n  Rect,\r\n  Circle,\r\n  Group,\r\n  FabricObject,\r\n  CanvasOptions,\r\n  ITextProps,\r\n  RectProps,\r\n  CircleProps,\r\n  GroupProps\r\n} from 'fabric';\r\n\r\n// Re-export with our preferred names\r\nexport type {\r\n  Canvas as FabricCanvas,\r\n  IText as FabricIText,\r\n  Rect as FabricRect,\r\n  Circle as FabricCircle,\r\n  Group as FabricGroup,\r\n  FabricObject,\r\n  CanvasOptions,\r\n  ITextProps,\r\n  RectProps,\r\n  CircleProps,\r\n  GroupProps\r\n};\r\n\r\n// Custom drawing options\r\nexport interface DrawingOptions {\r\n  color: string;\r\n  width: number;\r\n}\r\n\r\n// Shape positioning for our component\r\nexport interface ShapePosition {\r\n  left: number;\r\n  top: number;\r\n}\r\n\r\n// Helper type for SVG operations\r\nexport interface SVGOptions {\r\n  crossOrigin?: 'anonymous' | 'use-credentials' | '';\r\n  signal?: AbortSignal;\r\n}"
    },
    {
      "path": "src\\lib\\components\\Sketch\\SketchGallery.svelte",
      "type": "config",
      "content": "<!-- src/lib/components/Sketch/SketchGallery.svelte -->\n<script lang=\"ts\">\n  import type { Sketch } from './types';\n  import Whiteboard from './Whiteboard.svelte';\n  \n  let { sketches, onUpdate } = $props<{\n    sketches: Sketch[];\n    onUpdate: (sketch: Sketch) => void;\n  }>();\n  \n  let selectedSketch = $state<Sketch | null>(null);\n  let isEditMode = $state(false);\n  let hasUnsavedChanges = $state(false);\n  let editedSketchData = $state<any>(null);\n  \n  function handleSketchClick(sketch: Sketch) {\n    selectedSketch = sketch;\n    isEditMode = false;\n    hasUnsavedChanges = false;\n    editedSketchData = null;\n  }\n\n  function handleEdit(data: any) {\n    editedSketchData = data;\n    hasUnsavedChanges = true;\n  }\n\n  async function handleSave() {\n    if (selectedSketch && editedSketchData && onUpdate) {\n      const updatedSketch = {\n        ...selectedSketch,\n        data: editedSketchData,\n        updated: new Date().toISOString()\n      };\n      await onUpdate(updatedSketch);\n      selectedSketch = updatedSketch;\n      hasUnsavedChanges = false;\n    }\n  }\n\n  function handleKeydown(e: KeyboardEvent) {\n    if (e.key === 'Escape' && selectedSketch) {\n      if (hasUnsavedChanges) {\n        if (confirm('You have unsaved changes. Are you sure you want to close?')) {\n          closeModal();\n        }\n      } else {\n        closeModal();\n      }\n    }\n  }\n\n  function closeModal() {\n    selectedSketch = null;\n    isEditMode = false;\n    hasUnsavedChanges = false;\n    editedSketchData = null;\n  }\n</script>\n\n<svelte:window onkeydown={handleKeydown} />\n\n<!-- Gallery Grid -->\n<div class=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 p-4\">\n  {#each sketches as sketch (sketch.id)}\n    <button \n      onclick={() => handleSketchClick(sketch)}\n      class=\"group relative aspect-square overflow-hidden rounded-lg border\n             border-neutral-200 dark:border-neutral-800 bg-white dark:bg-neutral-900\n             hover:border-primary-500 focus:border-primary-500 \n             focus:outline-none focus:ring-2 focus:ring-primary-500\n             transition-all duration-200\"\n      type=\"button\"\n      aria-label={`View sketch: ${sketch.title}`}\n    >\n      <!-- Ensure image fills container properly -->\n      <div class=\"absolute inset-0 bg-white\">\n        <img \n          src={sketch.data.image} \n          alt={sketch.title}\n          class=\"w-full h-full object-contain\"\n          loading=\"lazy\"\n        />\n      </div>\n      \n      <div class=\"absolute inset-x-0 bottom-0 bg-gradient-to-t from-black/60 to-transparent\n                  p-4 text-white opacity-0 group-hover:opacity-100 \n                  group-focus:opacity-100 transition-opacity\">\n        <p class=\"text-sm font-medium truncate\">{sketch.title}</p>\n        <p class=\"text-xs text-neutral-200\">\n          Updated {new Date(sketch.updated).toLocaleDateString()}\n        </p>\n      </div>\n    </button>\n  {/each}\n</div>\n\n<!-- Modal -->\n{#if selectedSketch}\n  <div \n    role=\"dialog\"\n    aria-labelledby=\"sketch-modal-title\"\n    aria-modal=\"true\"\n    class=\"fixed inset-0 z-50 overflow-auto bg-black/50 dark:bg-black/50\n           backdrop-blur-sm flex items-center justify-center p-4\"\n  >\n    <!-- Backdrop -->\n    <button\n      class=\"absolute inset-0 w-full h-full cursor-default\"\n      onclick={() => {\n        if (hasUnsavedChanges) {\n          if (confirm('You have unsaved changes. Are you sure you want to close?')) {\n            closeModal();\n          }\n        } else {\n          closeModal();\n        }\n      }}\n      aria-label=\"Close modal\"\n      type=\"button\"\n    ></button>\n    \n    <!-- Modal content -->\n    <div\n      class=\"relative bg-neutral-900/80 dark:bg-neutral-700/80 rounded-lg max-w-5xl w-full  dark:text-neutral-400\n             max-h-[90vh] overflow-auto shadow-xl\"\n      role=\"document\"\n    >\n      <!-- Header -->\n      <div class=\"sticky top-0 z-10 flex justify-between items-center p-4\n                  bg-neutral-800 dark:bg-neutral-900 border-b border-neutral-700\n                  dark:border-neutral-600  dark:text-neutral-400\">\n                  <h2 \n                  id=\"sketch-modal-title\" \n                  class=\"text-xl font-bold dark:text-neutral-400\"\n                >\n                  {selectedSketch.title}\n                </h2>\n        \n        <div class=\"flex gap-2\">\n          {#if isEditMode}\n            <button\n              onclick={handleSave}\n              disabled={!hasUnsavedChanges}\n              class=\"px-4 py-2 rounded-lg font-medium\n                     bg-primary-500  dark:text-neutral-400 \n                     hover:bg-primary-600\n                     disabled:opacity-50\n                     transition-colors duration-200\"\n              type=\"button\"\n            >\n              Save Changes\n            </button>\n          {/if}\n          \n          <button\n            onclick={() => isEditMode = !isEditMode}\n            class=\"px-4 py-2 rounded-lg font-medium\n                   transition-colors duration-200\n                   {isEditMode ? \n                     'bg-neutral-200 dark:bg-neutral-800 text-neutral-900 dark:text-neutral-100 hover:bg-neutral-300 dark:hover:bg-neutral-700' : \n                     'bg-primary-500 text-white hover:bg-primary-600'}\"\n            type=\"button\"\n            aria-pressed={isEditMode}\n          >\n            {isEditMode ? 'View' : 'Edit'}\n          </button>\n          \n          <button\n            onclick={() => {\n              if (hasUnsavedChanges) {\n                if (confirm('You have unsaved changes. Are you sure you want to close?')) {\n                  closeModal();\n                }\n              } else {\n                closeModal();\n              }\n            }}\n            class=\"px-4 py-2 rounded-lg font-medium\n                   bg-neutral-200 dark:bg-neutral-800\n                   text-neutral-900 dark:text-neutral-100\n                   hover:bg-neutral-300 dark:hover:bg-neutral-700\n                   transition-colors duration-200\"\n            type=\"button\"\n          >\n            Close\n          </button>\n        </div>\n      </div>\n      \n      <!-- Whiteboard -->\n      <div class=\"p-4\">\n        <div class=\"h-[600px] bg-white rounded-lg border\n                    dark:border-neutral-700 overflow-hidden\">\n          <Whiteboard\n            initialData={selectedSketch.data}\n            readOnly={!isEditMode}\n            onUpdate={isEditMode ? handleEdit : undefined}\n          />\n        </div>\n      </div>\n    </div>\n  </div>\n{/if}\n\n<style>\n  @reference \"tailwindcss/theme\";\n\n  /* Optional: Add custom animations */\n  @keyframes modal-in {\n    from {\n      opacity: 0;\n      transform: translateY(10px);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n\n  [role=\"dialog\"] [role=\"document\"] {\n    animation: modal-in 0.2s ease-out;\n  }\n</style>"
    },
    {
      "path": "src\\lib\\components\\Sketch\\types.ts",
      "type": "config",
      "content": "// src/lib/components/Sketch/types.ts\r\nexport interface SketchData {\r\n    image: string;\r\n    transform: {\r\n      scale: number;\r\n      rotation: number;\r\n      translateX: number;\r\n      translateY: number;\r\n    };\r\n  }\r\n  \r\n  export interface Sketch {\r\n    id: string;\r\n    title: string;\r\n    data: SketchData;\r\n    created: string;\r\n    updated: string;\r\n  }\r\n  \r\n  export interface WhiteboardProps {\r\n    readOnly?: boolean;\r\n    initialData?: SketchData | null;\r\n    onUpdate?: (data: SketchData) => void;\r\n  }"
    },
    {
      "path": "src\\lib\\components\\Sketch\\Whiteboard.svelte",
      "type": "config",
      "content": "<!-- src/lib/components/Sketch/Whiteboard.svelte -->\n<script lang=\"ts\">\n  import type { \n    SketchData,\n    WhiteboardProps\n  } from './types';\n  import type { \n    FabricCanvas,\n    CanvasOptions,\n    SVGOptions,\n    FabricObject\n  } from './fabric-types';\n  import type { Object as FabricBaseObject } from 'fabric';\n  \n  let props = $props<{\n    readOnly?: boolean;\n    initialData?: SketchData | null;\n    onUpdate?: ((data: SketchData) => void) | undefined;\n  }>();\n\n  // Derive props with defaults\n  let readOnly = $derived(props.readOnly ?? false);\n  let initialData = $derived(props.initialData);\n  let onUpdate = $derived(props.onUpdate);\n\n  // Canvas and state\n  let canvasElement: HTMLCanvasElement | undefined = $state();\n  let fabricCanvas: FabricCanvas | undefined = $state();\n  let activeTool = $state<'select' | 'draw' | 'text' | 'rectangle' | 'circle'>('draw');\n  let brushColor = $state('#000000');\n  let brushWidth = $state(2);\n\n  // Initialize Fabric.js canvas\n  let initPromise = $state<Promise<void>>();\n  \n  $effect(() => {\n    if (!canvasElement || typeof window === 'undefined') return;\n    initPromise = initCanvas();\n  });\n\n  async function initCanvas() {\n    const { Canvas, loadSVGFromString, Group } = await import('fabric');\n    \n    // Get the container dimensions\n    const container = canvasElement!.parentElement;\n    const width = container?.clientWidth ?? 800;\n    const height = container?.clientHeight ?? 600;\n    \n    // Set canvas dimensions\n    canvasElement!.width = width;\n    canvasElement!.height = height;\n    \n    fabricCanvas = new Canvas(canvasElement!, {\n      isDrawingMode: !readOnly && activeTool === 'draw',\n      selection: !readOnly,\n      width: width,\n      height: height\n    });\n\n    // Set up drawing brush\n    if (fabricCanvas.freeDrawingBrush) {\n      fabricCanvas.freeDrawingBrush.color = brushColor;\n      fabricCanvas.freeDrawingBrush.width = brushWidth;\n    }\n\n    // Load initial data if provided\n    if (initialData?.image) {\n      try {\n        loadSVGFromString(\n          initialData.image,\n          (elements, options) => {\n            if (!fabricCanvas) return;\n            fabricCanvas.clear();\n            \n            // Ensure we have an array of fabric objects\n            if (Array.isArray(elements)) {\n              const fabricObjects = elements.filter((obj): obj is FabricBaseObject => \n                obj != null && 'type' in obj\n              );\n              \n              if (fabricObjects.length > 0) {\n                const group = new Group(fabricObjects);\n                fabricCanvas.add(group);\n                fabricCanvas.renderAll();\n              }\n            }\n          },\n          { crossOrigin: 'anonymous' }\n        );\n      } catch (error) {\n        console.error('Error loading SVG:', error);\n      }\n    }\n\n    // Handle object modifications\n    fabricCanvas.on('object:modified', handleUpdate);\n    fabricCanvas.on('path:created', handleUpdate);\n  }\n\n  // Cleanup\n  $effect(() => {\n    return () => {\n      fabricCanvas?.dispose();\n    };\n  });\n\n  // Update drawing settings when tool changes\n  $effect(() => {\n    if (!fabricCanvas) return;\n    \n    fabricCanvas.isDrawingMode = !readOnly && activeTool === 'draw';\n    \n    if (fabricCanvas.freeDrawingBrush) {\n      fabricCanvas.freeDrawingBrush.color = brushColor;\n      fabricCanvas.freeDrawingBrush.width = brushWidth;\n    }\n  });\n\n  // Handle updates and notify parent\n  function handleUpdate() {\n    if (!fabricCanvas || !onUpdate) return;\n    \n    const svgData = fabricCanvas.toSVG();\n    onUpdate({\n      image: svgData,\n      transform: {\n        scale: 1,\n        rotation: 0,\n        translateX: 0,\n        translateY: 0\n      }\n    });\n  }\n\n  // Tool actions\n  async function addText() {\n    if (!fabricCanvas || readOnly) return;\n    const { IText } = await import('fabric');\n    \n    const text = new IText('Click to edit', {\n      left: 100,\n      top: 100,\n      fontSize: 20,\n      fill: brushColor\n    });\n    fabricCanvas.add(text);\n    fabricCanvas.setActiveObject(text);\n    handleUpdate();\n  }\n\n  async function addRectangle() {\n    if (!fabricCanvas || readOnly) return;\n    const { Rect } = await import('fabric');\n    \n    const rect = new Rect({\n      left: 100,\n      top: 100,\n      width: 100,\n      height: 100,\n      fill: 'transparent',\n      stroke: brushColor,\n      strokeWidth: brushWidth\n    });\n    fabricCanvas.add(rect);\n    fabricCanvas.setActiveObject(rect);\n    handleUpdate();\n  }\n\n  async function addCircle() {\n    if (!fabricCanvas || readOnly) return;\n    const { Circle } = await import('fabric');\n    \n    const circle = new Circle({\n      left: 100,\n      top: 100,\n      radius: 50,\n      fill: 'transparent',\n      stroke: brushColor,\n      strokeWidth: brushWidth\n    });\n    fabricCanvas.add(circle);\n    fabricCanvas.setActiveObject(circle);\n    handleUpdate();\n  }\n\n  function clearCanvas() {\n    if (!fabricCanvas || readOnly) return;\n    fabricCanvas.clear();\n    handleUpdate();\n  }\n\n  function setTool(tool: typeof activeTool) {\n    activeTool = tool;\n    if (fabricCanvas) {\n      fabricCanvas.isDrawingMode = !readOnly && tool === 'draw';\n    }\n  }\n</script>\n\n<div class=\"relative w-full h-full bg-white rounded-lg\">\n  {#if !readOnly}\n    <div class=\"absolute top-4 left-4 flex gap-2 bg-white/80 backdrop-blur rounded-lg p-2 shadow-lg\">\n      <!-- Tool Selection -->\n      <button\n        type=\"button\"\n        class=\"p-2 rounded-md transition-colors {activeTool === 'select' ? 'bg-primary-100 text-primary-700' : 'hover:bg-neutral-100'}\"\n        onclick={() => setTool('select')}\n        title=\"Select\"\n      >\n        ✋\n      </button>\n      <button\n        type=\"button\"\n        class=\"p-2 rounded-md transition-colors {activeTool === 'draw' ? 'bg-primary-100 text-primary-700' : 'hover:bg-neutral-100'}\"\n        onclick={() => setTool('draw')}\n        title=\"Draw\"\n      >\n        ✏️\n      </button>\n      <button\n        type=\"button\"\n        class=\"p-2 rounded-md transition-colors hover:bg-neutral-100\"\n        onclick={addText}\n        title=\"Add Text\"\n      >\n        T\n      </button>\n      <button\n        type=\"button\"\n        class=\"p-2 rounded-md transition-colors hover:bg-neutral-100\"\n        onclick={addRectangle}\n        title=\"Add Rectangle\"\n      >\n        □\n      </button>\n      <button\n        type=\"button\"\n        class=\"p-2 rounded-md transition-colors hover:bg-neutral-100\"\n        onclick={addCircle}\n        title=\"Add Circle\"\n      >\n        ○\n      </button>\n\n      <!-- Color and Width Controls -->\n      <input\n        type=\"color\"\n        bind:value={brushColor}\n        class=\"w-8 h-8 rounded cursor-pointer\"\n        title=\"Color\"\n      />\n      <input\n        type=\"range\"\n        bind:value={brushWidth}\n        min=\"1\"\n        max=\"20\"\n        class=\"w-24\"\n        title=\"Brush Width\"\n      />\n\n      <!-- Clear Canvas -->\n      <button\n        type=\"button\"\n        class=\"p-2 rounded-md transition-colors hover:bg-red-100 text-red-600\"\n        onclick={clearCanvas}\n        title=\"Clear Canvas\"\n      >\n        🗑️\n      </button>\n    </div>\n  {/if}\n\n  <canvas\n    bind:this={canvasElement}\n    class=\"w-full h-full touch-none\"\n    style=\"touch-action: none\"\n  ></canvas>\n</div>\n\n<style>\n  @reference \"tailwindcss/theme\";\n\n  canvas {\n    mix-blend-mode: normal;\n  }\n\n  :global(.dark) canvas {\n    stroke: theme(--color-white);\n  }\n</style>"
    },
    {
      "path": "src\\lib\\index.ts",
      "type": "config",
      "content": "// place files you want to import through the `$lib` alias in this folder.\n"
    },
    {
      "path": "src\\lib\\server\\store.ts",
      "type": "config",
      "content": "// src/lib/server/store.ts \r\nimport type { Sketch } from \"$lib/components/Sketch/types\";\r\n\r\nexport const store = {\r\n  sketches: [] as Sketch[]\r\n};"
    },
    {
      "path": "src\\routes\\+layout.svelte",
      "type": "config",
      "content": "<script lang=\"ts\">\r\n  import { page } from '$app/state';\r\n  let { children } = $props();\r\n  import \"../app.css\";\r\n  \r\n  // Derive the current path to highlight active links\r\n  let currentPath = $derived(page.url.pathname);\r\n  </script>\r\n  \r\n  <main class=\"font-poppins\">\r\n    <nav class=\"bg-white dark:bg-neutral-800 shadow\">\r\n      <div class=\"max-w-7xl mx-auto px-4\">\r\n        <div class=\"flex justify-between h-16\">\r\n          <div class=\"flex space-x-4\">\r\n            <a \r\n              href=\"/\" \r\n              class=\"flex items-center px-4 py-2 rounded-md transition-colors\r\n                     {currentPath === '/' ? \r\n                       'bg-primary-50 dark:bg-primary-900 text-primary-700 dark:text-primary-100' : \r\n                       'text-neutral-600 dark:text-neutral-300 hover:bg-neutral-100 dark:hover:bg-neutral-700'}\"\r\n            >\r\n              Home\r\n            </a>\r\n            <a \r\n              href=\"/sketches\" \r\n              class=\"flex items-center px-4 py-2 rounded-md transition-colors\r\n                     {currentPath === '/sketches' ? \r\n                       'bg-primary-50 dark:bg-primary-900 text-primary-700 dark:text-primary-100' : \r\n                       'text-neutral-600 dark:text-neutral-300 hover:bg-neutral-100 dark:hover:bg-neutral-700'}\"\r\n            >\r\n              Sketches\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n    \r\n    <div class=\"min-h-[calc(100vh-4rem)]\">\r\n      {@render children()}\r\n    </div>\r\n  </main>\r\n  \r\n  <style>\r\n    @reference \"tailwindcss/theme\";\r\n    :global(html) {\r\n      background-color: theme(--color-neutral-900);\r\n      color-scheme: dark;\r\n    }\r\n  </style>"
    },
    {
      "path": "src\\routes\\+page.svelte",
      "type": "config",
      "content": "<!-- src/routes/+page.svelte -->\n<script lang=\"ts\">\n  import { MandelbrotSet } from '$lib/components/MandelbrotSet';\n  import Whiteboard from '$lib/components/Sketch/Whiteboard.svelte';\n  \n  // Sketch state\n  let currentSketch = $state(null);\n  \n  function handleSketchUpdate(sketchData: any) {\n    currentSketch = sketchData;\n  }\n  </script>\n  \n  <div class=\"w-full max-w-4xl mx-auto p-4 space-y-8\">\n    <!-- Mandelbrot Section -->\n    <section class=\"rounded-lg overflow-hidden shadow-lg\">\n      <h2 class=\"text-xl font-bold mb-4\">Mandelbrot Explorer</h2>\n      <MandelbrotSet \n        width={800}\n        height={600}\n        maxIterations={100}\n        colorScheme=\"classic\"\n      />\n    </section>\n  \n    \n  \n    <!-- Optional: Controls or Save Button -->\n    <div class=\"flex justify-end\">\n      <button\n        onclick={async () => {\n          if (currentSketch) {\n            try {\n              const response = await fetch('/api/posts', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({\n                  type: 'sketch',\n                  data: currentSketch\n                })\n              });\n              \n              if (!response.ok) throw new Error('Failed to save sketch');\n              \n              // Show success message\n              alert('Sketch saved successfully!');\n            } catch (error) {\n              // Show error message\n              alert('Failed to save sketch');\n            }\n          }\n        }}\n        class=\"px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 \n               transition-colors duration-200\"\n      >\n        Save Sketch\n      </button>\n    </div>\n  </div>\n  \n  <style>\n    /* Optional: Add any custom styles here */\n  </style>"
    },
    {
      "path": "src\\routes\\api\\posts\\+server.ts",
      "type": "config",
      "content": "// src/routes/api/posts/+server.ts\r\nimport type { RequestEvent } from '@sveltejs/kit';\r\nimport { json } from '@sveltejs/kit';\r\n\r\nexport async function POST({ request }: RequestEvent) {\r\n  try {\r\n    const post = await request.json();\r\n    \r\n    // Here you would:\r\n    // 1. Validate the post data\r\n    // 2. Save to your database\r\n    // 3. Handle the sketch data appropriately\r\n    \r\n    return json({ success: true, id: 'new-post-id' });\r\n  } catch (error) {\r\n    return new Response(String(error), { status: 500 });\r\n  }\r\n}"
    },
    {
      "path": "src\\routes\\api\\sketches\\[id]\\+server.ts",
      "type": "config",
      "content": "// src/routes/api/sketches/[id]/+server.ts\r\nimport { json } from '@sveltejs/kit';\r\nimport type { RequestEvent } from '@sveltejs/kit';\r\nimport type { Sketch } from \"$lib/components/Sketch/types\";\r\nimport { store } from '$lib/server/store';\r\n\r\nexport async function PUT({ request, params }: RequestEvent) {\r\n  const { id } = params;\r\n  const updatedSketch: Sketch = await request.json();\r\n  \r\n  const index = store.sketches.findIndex(s => s.id === id);\r\n  \r\n  if (index === -1) {\r\n    return new Response('Sketch not found', { status: 404 });\r\n  }\r\n  \r\n  store.sketches[index] = {\r\n    ...updatedSketch,\r\n    updated: new Date().toISOString()\r\n  };\r\n  \r\n  return json(store.sketches[index]);\r\n}"
    },
    {
      "path": "src\\routes\\api\\sketches\\+server.ts",
      "type": "config",
      "content": "// src/routes/api/sketches/+server.ts\r\nimport { json } from '@sveltejs/kit';\r\nimport type { RequestEvent } from '@sveltejs/kit';\r\nimport type { Sketch } from \"$lib/components/Sketch/types\";\r\nimport { store } from '$lib/server/store';\r\n\r\nexport async function GET() {\r\n  return json(store.sketches);\r\n}\r\n\r\nexport async function POST({ request }: RequestEvent) {\r\n  const sketch: Omit<Sketch, 'id' | 'created' | 'updated'> = await request.json();\r\n  \r\n  const newSketch: Sketch = {\r\n    ...sketch,\r\n    id: crypto.randomUUID(),\r\n    created: new Date().toISOString(), \r\n    updated: new Date().toISOString()\r\n  };\r\n  \r\n  store.sketches.push(newSketch);\r\n  return json(newSketch);\r\n}"
    },
    {
      "path": "src\\routes\\posts\\edit\\+page.svelte",
      "type": "config",
      "content": "<!-- src/routes/posts/edit/+page.svelte -->\r\n<script lang=\"ts\">\r\n    import Whiteboard from '$lib/components/Sketch/Whiteboard.svelte';\r\n    \r\n    // Post data\r\n    let post = $state({\r\n      title: '',\r\n      content: '',\r\n      sketch: null\r\n    });\r\n    \r\n    // Handle sketch updates\r\n    function updateSketch(sketchData: any) {\r\n      post.sketch = sketchData;\r\n    }\r\n    \r\n    // Save post\r\n    async function savePost() {\r\n      try {\r\n        const response = await fetch('/api/posts', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(post)\r\n        });\r\n        \r\n        if (!response.ok) throw new Error('Failed to save post');\r\n        \r\n        // Handle successful save\r\n      } catch (error) {\r\n        // Handle error appropriately\r\n      }\r\n    }\r\n    </script>\r\n    \r\n    <div class=\"max-w-4xl mx-auto p-4 space-y-6\">\r\n      <input\r\n        type=\"text\"\r\n        bind:value={post.title}\r\n        class=\"w-full text-2xl font-bold p-2 border rounded\"\r\n        placeholder=\"Post title...\"\r\n      />\r\n      \r\n      <div class=\"h-[500px] border rounded\">\r\n        <Whiteboard\r\n          initialData={post.sketch}\r\n          onUpdate={updateSketch}\r\n        />\r\n      </div>\r\n      \r\n      <textarea\r\n  bind:value={post.content}\r\n  class=\"w-full h-64 p-2 border rounded\"\r\n  placeholder=\"Write your post content...\"\r\n></textarea>\r\n      \r\n      <button\r\n        onclick={savePost}\r\n        class=\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\"\r\n      >\r\n        Save Post\r\n      </button>\r\n    </div>"
    },
    {
      "path": "src\\routes\\sketches\\+page.svelte",
      "type": "config",
      "content": "<!-- src/routes/sketches/+page.svelte -->\n<script lang=\"ts\">\n  import { onMount } from 'svelte';\n  import type { Sketch, SketchData } from \"$lib/components/Sketch/types\";\n  import Whiteboard from '$lib/components/Sketch/Whiteboard.svelte';\n  import SketchGallery from '$lib/components/Sketch/SketchGallery.svelte';\n  \n  let sketches = $state<Sketch[]>([]);\n  let isCreating = $state(false);\n  let newSketchTitle = $state('');\n  // Fix: Properly type newSketchData to allow null\n  let newSketchData = $state<SketchData | null>(null);\n  \n  // Load sketches\n  $effect(() => {\n    loadSketches();\n  });\n  \n  async function loadSketches() {\n    const response = await fetch('/api/sketches');\n    if (response.ok) {\n      sketches = await response.json();\n    }\n  }\n  \n  async function saveNewSketch() {\n    if (!newSketchData || !newSketchTitle.trim()) return;\n    \n    const response = await fetch('/api/sketches', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        title: newSketchTitle,\n        data: newSketchData\n      })\n    });\n    \n    if (response.ok) {\n      const savedSketch = await response.json();\n      sketches = [...sketches, savedSketch];\n      isCreating = false;\n      newSketchTitle = '';\n      newSketchData = null;\n    }\n  }\n  \n  async function updateSketch(sketch: Sketch) {\n    const response = await fetch(`/api/sketches/${sketch.id}`, {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(sketch)\n    });\n    \n    if (response.ok) {\n      const updatedSketch = await response.json();\n      sketches = sketches.map(s => \n        s.id === updatedSketch.id ? updatedSketch : s\n      );\n    } else {\n      console.error('Failed to update sketch:', await response.text());\n      alert('Failed to update sketch. Please try again.');\n    }\n  }\n</script>\n\n    \n    <div class=\"max-w-7xl mx-auto p-4\">\n      <div class=\"flex justify-between items-center mb-8\">\n        <h1 class=\"text-2xl font-bold\">My Sketches</h1>\n        <button\n          onclick={() => isCreating = true}\n          class=\"px-4 py-2 rounded bg-blue-500 text-white \n                 hover:bg-blue-600 transition-colors\"\n        >\n          New Sketch\n        </button>\n      </div>\n    \n      <SketchGallery\n        {sketches}\n        onUpdate={updateSketch}\n      />\n      \n      {#if isCreating}\n        <div class=\"fixed inset-0 bg-black/50 flex items-center justify-center p-4\">\n          <div class=\"bg-white rounded-lg max-w-4xl w-full p-4\">\n            <div class=\"flex justify-between items-center mb-4\">\n              <input\n                type=\"text\"\n                bind:value={newSketchTitle}\n                placeholder=\"Sketch title...\"\n                class=\"px-4 py-2 border rounded text-neutral-600\"\n              />\n              <div class=\"flex gap-2\">\n                <button\n                  onclick={saveNewSketch}\n                  disabled={!newSketchTitle.trim() || !newSketchData}\n                  class=\"px-4 py-2 rounded bg-blue-500 text-white \n                         hover:bg-blue-600 transition-colors\n                         disabled:opacity-50 disabled:cursor-not-allowed\"\n                >\n                  Save\n                </button>\n                <button\n                  onclick={() => isCreating = false}\n                  class=\"px-4 py-2 rounded bg-gray-500 text-white \n                         hover:bg-gray-600 transition-colors\"\n                >\n                  Cancel\n                </button>\n              </div>\n            </div>\n            \n            <div class=\"h-[600px] bg-white rounded border\">\n              <Whiteboard\n                onUpdate={(data) => newSketchData = data}\n              />\n            </div>\n          </div>\n        </div>\n      {/if}\n    </div>"
    },
    {
      "path": "svelte.config.js",
      "type": "config",
      "content": "import adapter from '@sveltejs/adapter-vercel';\nimport { vitePreprocess } from '@sveltejs/vite-plugin-svelte';\n\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n\t// Consult https://svelte.dev/docs/kit/integrations\n\t// for more information about preprocessors\n\tpreprocess: vitePreprocess(),\n\n\tkit: {\n\t\t// adapter-auto only supports some environments, see https://svelte.dev/docs/kit/adapter-auto for a list.\n\t\t// If your environment is not supported, or you settled on a specific environment, switch out the adapter.\n\t\t// See https://svelte.dev/docs/kit/adapters for more information about adapters.\n\t\tadapter: adapter()\n\t}\n};\n\nexport default config;\n"
    },
    {
      "path": "tsconfig.json",
      "type": "config",
      "content": "{\n\t\"extends\": \"./.svelte-kit/tsconfig.json\",\n\t\"compilerOptions\": {\n\t\t\"allowJs\": true,\n\t\t\"checkJs\": true,\n\t\t\"allowSyntheticDefaultImports\": true,\n\t\t\"esModuleInterop\": true,\n\t\t\"forceConsistentCasingInFileNames\": true,\n\t\t\"resolveJsonModule\": true,\n\t\t\"skipLibCheck\": true,\n\t\t\"sourceMap\": true,\n\t\t\"strict\": true,\n\t\t\"moduleResolution\": \"bundler\",\n\t}\n\t// Path aliases are handled by https://svelte.dev/docs/kit/configuration#alias\n\t// except $lib which is handled by https://svelte.dev/docs/kit/configuration#files\n\t//\n\t// If you want to overwrite includes/excludes, make sure to copy over the relevant includes/excludes\n\t// from the referenced tsconfig.json - TypeScript does not merge them in\n}\n"
    },
    {
      "path": "vite.config.ts",
      "type": "config",
      "content": "import { sveltekit } from '@sveltejs/kit/vite';\nimport { defineConfig } from 'vite';\nimport tailwindcss from '@tailwindcss/vite';\nexport default defineConfig({\n  plugins: [\n    tailwindcss(),\n    sveltekit(),\n  ],\n});"
    }
  ]
}